
  Warning Unused Argument
  File "./ComponentAsProp.re", line 3, characters 0-432
  optional argument button of function +make is never used

  Warning Unused Argument
  File "./ImportMyBanner.re", line 8, characters 0-353
  optional argument message of function +make is never used

  Warning Unused Argument
  File "./TestImport.re", line 30, characters 0-284
  optional argument message of function +make is never used

  Warning Redundant Optional Argument
  File "./TestOptArg.re", line 3, characters 0-28
  optional argument x of function +foo is always supplied (1 calls)

  Warning Unused Argument
  File "./OptArg.rei", line 2, characters 0-50
  optional argument x of function +bar is never used

  Warning Redundant Optional Argument
  File "./OptArg.re", line 20, characters 0-51
  optional argument a of function +wrapOneArg is always supplied (1 calls)

  Warning Unused Argument
  File "./OptArg.re", line 14, characters 0-42
  optional argument a of function +twoArgs is never used

  Warning Unused Argument
  File "./OptArg.re", line 14, characters 0-42
  optional argument b of function +twoArgs is never used

  Warning Unused Argument
  File "./OptArg.re", line 9, characters 0-54
  optional argument b of function +threeArgs is never used

  Warning Redundant Optional Argument
  File "./OptArg.re", line 9, characters 0-54
  optional argument a of function +threeArgs is always supplied (2 calls)

  Warning Unused Argument
  File "./OptArg.re", line 3, characters 0-38
  optional argument x of function +bar is never used

  Warning Unused Argument
  File "./OptArg.re", line 1, characters 0-48
  optional argument y of function +foo is never used

  Warning Unused Argument
  File "./OptArg.re", line 1, characters 0-48
  optional argument z of function +foo is never used

  Warning Dead Module
  File "./AutoAnnotate.re", line 0, characters 0-0
  +AutoAnnotate is a dead module as all its items are dead.

  Warning Dead Type
  File "./AutoAnnotate.re", line 2, characters 4-10
  variant.R is a variant case which is never constructed
  <-- line 2
    | [@dead "variant.R"] R(int);

  Warning Dead Type
  File "./AutoAnnotate.re", line 5, characters 15-22
  record.variant is a record label never used to read a value
  <-- line 5
  type record = {[@dead "record.variant"] variant};

  Warning Dead Type
  File "./AutoAnnotate.re", line 7, characters 11-18
  r2.r2 is a record label never used to read a value
  <-- line 7
  type r2 = {[@dead "r2.r2"] r2: int};

  Warning Dead Type
  File "./AutoAnnotate.re", line 9, characters 11-18
  r3.r3 is a record label never used to read a value
  <-- line 9
  type r3 = {[@dead "r3.r3"] r3: int};

  Warning Dead Type
  File "./AutoAnnotate.re", line 11, characters 11-18
  r4.r4 is a record label never used to read a value
  <-- line 11
  type r4 = {[@dead "r4.r4"] r4: int};

  Warning Dead Type
  File "./AutoAnnotate.re", line 15, characters 4-14
  annotatedVariant.R2 is a variant case which is never constructed
  <-- line 15
    | [@dead "annotatedVariant.R2"] R2(r2, r3)

  Warning Dead Type
  File "./AutoAnnotate.re", line 16, characters 4-10
  annotatedVariant.R4 is a variant case which is never constructed
  <-- line 16
    | [@dead "annotatedVariant.R4"] R4(r4);

  Warning Dead Module
  File "./BucklescriptAnnotations.re", line 0, characters 0-0
  +BucklescriptAnnotations is a dead module as all its items are dead.

  Warning Dead Value
  File "./BucklescriptAnnotations.re", line 19, characters 0-53
  +foo is never used
  <-- line 19
  [@dead "+foo"] let foo = (x: someMethods) => x##threeargs(3, "a", 4);

  Warning Dead Value
  File "./BucklescriptAnnotations.re", line 21, characters 0-70
  +bar is never used
  <-- line 21
  [@dead "+bar"] let bar = (x: someMethods) => {

  Warning Dead Exception
  File "./DeadExn.re", line 7, characters 0-15
  DeadE is never raised or passed as value
  <-- line 7
  [@dead "DeadE"] exception DeadE;

  Warning Dead Value
  File "./DeadExn.re", line 8, characters 0-25
  +eToplevel is never used
  <-- line 8
  [@dead "+eToplevel"] let eToplevel = Etoplevel;

  Warning Dead Module
  File "./DeadMl.ml", line 1, characters 0-120
  +DeadMl.QQ is a dead module as all its items are dead.

  Warning Dead Value
  File "./DeadMl.ml", line 3, characters 4-93
  QQ.+thisSpansSeveralLines is never used
  <-- line 3
            x + y : int -> int -> int) [@@dead "QQ.+thisSpansSeveralLines"] 

  Warning Dead Module
  File "./DeadMl.ml", line 8, characters 0-103
  +DeadMl.AA is a dead module as all its items are dead.

  Warning Dead Value
  File "./DeadMl.ml", line 9, characters 2-40
  AA.+thisIsInInterface is never used
  <-- line 9
      int -> int [@@dead "AA.+thisIsInInterface"] 

  Warning Dead Value
  File "./DeadMl.ml", line 12, characters 2-29
  AA.+thisIsInInterface is never used
  <-- line 12
    let thisIsInInterface x = x [@@dead "AA.+thisIsInInterface"] 

  Warning Dead Value
  File "./DeadMl.ml", line 15, characters 0-25
  +thisHasSemicolons is never used
  <-- line 15
  let thisHasSemicolons = 3 [@@dead "+thisHasSemicolons"] ;;

  Warning Dead Type
  File "./DeadMl.ml", line 17, characters 18-25
  thisIsDead.DeadA is a variant case which is never constructed
  <-- line 17
  type thisIsDead = | DeadA [@dead "thisIsDead.DeadA"]  | DeadB

  Warning Dead Type
  File "./DeadMl.ml", line 17, characters 26-33
  thisIsDead.DeadB is a variant case which is never constructed
  <-- line 17
  type thisIsDead = | DeadA [@dead "thisIsDead.DeadA"]  | DeadB [@dead "thisIsDead.DeadB"] 

  Warning Dead Module
  File "./DeadMl.ml", line 25, characters 0-256
  +DeadMl.Bs_version is a dead module as all its items are dead.

  Warning Dead Value
  File "./DeadMl.ml", line 26, characters 6-26
  Bs_version.+version is never used
  <-- line 26
    sig val version : string [@@dead "Bs_version.+version"]  val header : string val package_name : string end 

  Warning Dead Value
  File "./DeadMl.ml", line 26, characters 27-46
  Bs_version.+header is never used
  <-- line 26
    sig val version : string [@@dead "Bs_version.+version"]  val header : string [@@dead "Bs_version.+header"]  val package_name : string end 

  Warning Dead Value
  File "./DeadMl.ml", line 26, characters 47-72
  Bs_version.+package_name is never used
  <-- line 26
    sig val version : string [@@dead "Bs_version.+version"]  val header : string [@@dead "Bs_version.+header"]  val package_name : string [@@dead "Bs_version.+package_name"]  end 

  Warning Dead Value
  File "./DeadMl.ml", line 29, characters 4-31
  Bs_version.+version is never used
  <-- line 29
      let version = "7.2.0-dev.4" [@@dead "Bs_version.+version"] 

  Warning Dead Value
  File "./DeadMl.ml", line 30, characters 4-70
  Bs_version.+header is never used
  <-- line 30
      let header = "// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE" [@@dead "Bs_version.+header"] 

  Warning Dead Value
  File "./DeadMl.ml", line 31, characters 4-36
  Bs_version.+package_name is never used
  <-- line 31
      let package_name = "bs-platform" [@@dead "Bs_version.+package_name"] 

  Warning Dead Type
  File "./DeadMl.ml", line 35, characters 2-137
  l.Lfunction is a variant case which is never constructed
  <-- line 35
                         } [@dead "l.Lfunction"] 

  Warning Dead Type
  File "./DeadMl.ml", line 41, characters 2-22
  module_info.module_name is a record label never used to read a value
  <-- line 41
    module_name: string; [@dead "module_info.module_name"] 

  Warning Dead Type
  File "./DeadMl.ml", line 42, characters 2-12
  module_info.case is a record label never used to read a value
  <-- line 42
    case: bool [@dead "module_info.case"] 

  Warning Dead Value
  File "./DeadMl.ml", line 45, characters 0-305
  +map_split_opt is never used
  <-- line 45
      (match d with Some d -> d::ds | None -> ds) [@@dead "+map_split_opt"] 

  Warning Dead Value
  File "./DeadMl.ml", line 56, characters 0-40
  +inline_threshold is never used
  <-- line 56
  let inline_threshold = Some (10. /. 8.); [@@dead "+inline_threshold"] 

  Warning Dead Value
  File "./DeadMl.ml", line 59, characters 2-15
  Scope.+dead1 is never used
  <-- line 59
    let dead1 = 1 [@@dead "Scope.+dead1"] 

  Warning Dead Value
  File "./DeadMl.ml", line 62, characters 4-22
  Scope.Inner1.+deadInner1 is never used
  <-- line 62
      let deadInner1 = 0 [@@dead "Scope.Inner1.+deadInner1"] 

  Warning Dead Value
  File "./DeadMl.ml", line 69, characters 2-15
  Scope.+dead2 is never used
  <-- line 69
    let dead2 = 2 [@@dead "Scope.+dead2"] 

  Warning Dead Value
  File "./DeadMl.ml", line 80, characters 0-13
  +dead4 is never used
  <-- line 80
  let dead4 = 4 [@@dead "+dead4"] 

  Warning Dead Value
  File "./DeadMl.ml", line 85, characters 0-13
  +dead5 is never used
  <-- line 85
  let dead5 = 5 [@@dead "+dead5"] 

  Warning Dead Value
  File "./DeadMl.ml", line 90, characters 0-37
  +dead7 is never used
  <-- line 90
  [@@ocaml.warning "-30"] [@@dead "+dead7"] 

  Warning Dead Value
  File "./DeadMl.ml", line 94, characters 2-16
  WithSignature.+dead8 is never used
  <-- line 94
    val dead8: int [@@dead "WithSignature.+dead8"] 

  Warning Dead Value
  File "./DeadMl.ml", line 99, characters 2-17
  WithSignature.+dead10 is never used
  <-- line 99
    val dead10: int [@@dead "WithSignature.+dead10"] 

  Warning Dead Value
  File "./DeadMl.ml", line 106, characters 2-15
  WithSignature.+dead8 is never used
  <-- line 106
    let dead8 = 8 [@@dead "WithSignature.+dead8"] 

  Warning Dead Value
  File "./DeadMl.ml", line 108, characters 2-17
  WithSignature.+dead10 is never used
  <-- line 108
    let dead10 = 10 [@@dead "WithSignature.+dead10"] 

  Warning Dead Value
  File "./DeadRT.re", line 5, characters 0-118
  +emitModuleAccessPath is never used
  <-- line 5
  [@dead "+emitModuleAccessPath"] let rec emitModuleAccessPath = moduleAccessPath =>

  Warning Dead Value
  File "./DeadTest.re", line 2, characters 0-17
  +fortytwo is never used
  <-- line 2
  [@dead "+fortytwo"] let fortytwo = 42;

  Warning Dead Module
  File "./DeadTest.re", line 27, characters 0-101
  +DeadTest.M is a dead module as all its items are dead.

  Warning Dead Value
  File "./DeadTest.re", line 31, characters 2-34
  M.+thisSignatureItemIsDead is never used
  <-- line 31
    [@dead "M.+thisSignatureItemIsDead"] let thisSignatureItemIsDead = 34;

  Warning Dead Value
  File "./DeadTest.re", line 63, characters 2-12
  MM.+y is never used
  <-- line 63
    [@dead "MM.+y"] let y: int;

  Warning Dead Value
  File "./DeadTest.re", line 69, characters 2-35
  MM.+valueOnlyInImplementation is never used
  <-- line 69
    [@dead "MM.+valueOnlyInImplementation"] let valueOnlyInImplementation = 7;

  Warning Dead Value
  File "./DeadTest.re", line 79, characters 0-37
  +unusedRec is never used
  <-- line 79
  [@dead "+unusedRec"] let rec unusedRec = () => unusedRec();

  Warning Dead Value
  File "./DeadTest.re", line 81, characters 0-58
  +split_map is never used
  <-- line 81
  [@dead "+split_map"] let rec split_map = l => {

  Warning Dead Value
  File "./DeadTest.re", line 86, characters 0-27
  +rec1 is never used
  <-- line 86
  [@dead "+rec1"] let rec rec1 = () => rec2()

  Warning Dead Value
  File "./DeadTest.re", line 87, characters 0-23
  +rec2 is never used
  <-- line 87
  [@dead "+rec2"] and rec2 = () => rec1();

  Warning Dead Value
  File "./DeadTest.re", line 89, characters 0-79
  +recWithCallback is never used
  <-- line 89
  [@dead "+recWithCallback"] let rec recWithCallback = () => {

  Warning Dead Value
  File "./DeadTest.re", line 94, characters 0-55
  +foo is never used
  <-- line 94
  [@dead "+foo"] let rec foo = () => {

  Warning Dead Value
  File "./DeadTest.re", line 98, characters 0-21
  +bar is never used
  <-- line 98
  [@dead "+bar"] and bar = () => foo();

  Warning Dead Value
  File "./DeadTest.re", line 100, characters 0-71
  +withDefaultValue is never used
  <-- line 100
  [@dead "+withDefaultValue"] let withDefaultValue = (~paramWithDefault=3, y) => paramWithDefault + y;

  Warning Dead Value
  File "./DeadTest.re", line 102, characters 0-74
  +unsafe_string1 is never used
  <-- line 102
  [@dead "+unsafe_string1"] external unsafe_string1: (bytes, int, int) => Digest.t = "caml_md5_string";

  Warning Dead Module
  File "./DeadTest.re", line 104, characters 0-184
  +DeadTest.Ext_buffer is a dead module as all its items are dead.

  Warning Dead Value
  File "./DeadTest.re", line 105, characters 2-76
  Ext_buffer.+unsafe_string2 is never used
  <-- line 105
    [@dead "Ext_buffer.+unsafe_string2"] external unsafe_string2: (bytes, int, int) => Digest.t = "caml_md5_string";

  Warning Dead Value
  File "./DeadTest.re", line 107, characters 2-76
  Ext_buffer.+unsafe_string2 is never used
  <-- line 107
    [@dead "Ext_buffer.+unsafe_string2"] external unsafe_string2: (bytes, int, int) => Digest.t = "caml_md5_string";

  Warning Dead Module
  File "./DeadTest.re", line 118, characters 0-410
  +DeadTest.LazyDynamicallyLoadedComponent2 is a dead module as all its items are dead.

  Warning Dead Value With Side Effects
  File "./DeadTest.re", line 119, characters 2-136
  LazyDynamicallyLoadedComponent2.+reasonResource is never used and could have side effects

  Warning Dead Value
  File "./DeadTest.re", line 121, characters 2-54
  LazyDynamicallyLoadedComponent2.+makeProps is never used
  <-- line 121
    [@dead "LazyDynamicallyLoadedComponent2.+makeProps"] let makeProps = DynamicallyLoadedComponent.makeProps;

  Warning Dead Value
  File "./DeadTest.re", line 122, characters 2-170
  LazyDynamicallyLoadedComponent2.+make is never used
  <-- line 122
    [@dead "LazyDynamicallyLoadedComponent2.+make"] let make = props =>

  Warning Dead Value
  File "./DeadTest.re", line 134, characters 0-62
  +cmp2 is never used
  <-- line 134
  [@dead "+cmp2"] let cmp2 = () => <LazyDynamicallyLoadedComponent2 s="hello" />;

  Warning Dead Value
  File "./DeadTest.re", line 150, characters 0-61
  +zzz is never used
  <-- line 150
  [@dead "+zzz"] let zzz = {

  Warning Dead Value
  File "./DeadTest.re", line 159, characters 0-15
  +second is never used
  <-- line 159
  [@dead "+second"] let second = 1L;

  Warning Dead Value
  File "./DeadTest.re", line 160, characters 0-35
  +minute is never used
  <-- line 160
  [@dead "+minute"] let minute = Int64.mul(60L, second);

  Warning Dead Value
  File "./DeadTest.re", line 162, characters 0-21
  +deadRef is never used
  <-- line 162
  [@dead "+deadRef"] let deadRef = ref(12);

  Warning Dead Value
  File "./DeadTest.re", line 164, characters 0-37
  +makeSwitch is never used
  <-- line 164
  [@dead "+makeSwitch"] let makeSwitch = ComponentSwitch.make;

  Warning Dead Value With Side Effects
  File "./DeadTest.re", line 171, characters 0-40
  +theSideEffectIsLogging is never used and could have side effects

  Warning Dead Value
  File "./DeadTest.re", line 173, characters 0-54
  +stringLengthNoSideEffects is never used
  <-- line 173
  [@dead "+stringLengthNoSideEffects"] let stringLengthNoSideEffects = String.length("sdkdl");

  Warning Dead Module
  File "./DeadTestBlacklist.re", line 0, characters 0-0
  +DeadTestBlacklist is a dead module as all its items are dead.

  Warning Dead Value
  File "./DeadTestBlacklist.re", line 1, characters 0-10
  +x is never used
  <-- line 1
  [@dead "+x"] let x = 34;

  Warning Dead Module
  File "./DeadTestWithInterface.re", line 1, characters 0-52
  +DeadTestWithInterface.Ext_buffer is a dead module as all its items are dead.

  Warning Dead Value
  File "./DeadTestWithInterface.re", line 1, characters 20-30
  Ext_buffer.+x is never used
  <-- line 1
  module Ext_buffer: {[@dead "Ext_buffer.+x"] let x: int;} = {

  Warning Dead Value
  File "./DeadTestWithInterface.re", line 2, characters 2-12
  Ext_buffer.+x is never used
  <-- line 2
    [@dead "Ext_buffer.+x"] let x = 42;

  Warning Dead Type
  File "./DeadTypeTest.re", line 3, characters 4-5
  t.B is a variant case which is never constructed
  <-- line 3
    | [@dead "t.B"] B;

  Warning Dead Value
  File "./DeadTypeTest.re", line 4, characters 0-9
  +a is never used
  <-- line 4
  [@dead "+a"] let a = A;

  Warning Dead Type
  File "./DeadTypeTest.re", line 10, characters 4-13
  deadType.InNeither is a variant case which is never constructed
  <-- line 10
    | [@dead "deadType.InNeither"] InNeither;

  Warning Dead Type
  File "./DeadTypeTest.rei", line 3, characters 4-5
  t.B is a variant case which is never constructed
  <-- line 3
    | [@dead "t.B"] B;

  Warning Dead Value
  File "./DeadTypeTest.rei", line 4, characters 0-8
  +a is never used
  <-- line 4
  [@dead "+a"] let a: t;

  Warning Dead Type
  File "./DeadTypeTest.rei", line 10, characters 4-13
  deadType.InNeither is a variant case which is never constructed
  <-- line 10
    | [@dead "deadType.InNeither"] InNeither;

  Warning Dead Value
  File "./DeadValueTest.re", line 2, characters 0-17
  +valueDead is never used
  <-- line 2
  [@dead "+valueDead"] let valueDead = 2;

  Warning Dead Value
  File "./DeadValueTest.re", line 4, characters 0-33
  +valueOnlyInImplementation is never used
  <-- line 4
  [@dead "+valueOnlyInImplementation"] let valueOnlyInImplementation = 3;

  Warning Dead Value
  File "./DeadValueTest.re", line 6, characters 0-270
  +subList is never used
  <-- line 6
  [@dead "+subList"] let rec subList = (b, e, l) =>

  Warning Dead Value
  File "./DeadValueTest.rei", line 2, characters 0-18
  +valueDead is never used
  <-- line 2
  [@dead "+valueDead"] let valueDead: int;

  Warning Dead Type
  File "./Docstrings.re", line 62, characters 4-5
  t.B is a variant case which is never constructed
  <-- line 62
    | [@dead "t.B"] B;

  Warning Dead Module
  File "./ErrorHandler.re", line 0, characters 0-0
  +ErrorHandler is a dead module as all its items are dead.

  Warning Dead Value
  File "./ErrorHandler.re", line 11, characters 0-21
  +x is never used
  <-- line 12
  [@dead "+x"] [@genType]

  Warning Dead Module
  File "./ErrorHandler.rei", line 0, characters 0-0
  ErrorHandler is a dead module as all its items are dead.

  Warning Dead Value
  File "./ErrorHandler.rei", line 7, characters 0-10
  +x is never used
  <-- line 7
  [@dead "+x"] let x: int;

  Warning Dead Module
  File "./FirstClassModulesInterface.re", line 0, characters 0-0
  +FirstClassModulesInterface is a dead module as all its items are dead.

  Warning Dead Type
  File "./FirstClassModulesInterface.re", line 2, characters 2-8
  record.x is a record label never used to read a value
  <-- line 2
    [@dead "record.x"] x: int,

  Warning Dead Type
  File "./FirstClassModulesInterface.re", line 3, characters 2-11
  record.y is a record label never used to read a value
  <-- line 3
    [@dead "record.y"] y: string,

  Warning Dead Value
  File "./FirstClassModulesInterface.re", line 6, characters 0-26
  +r is never used
  <-- line 6
  [@dead "+r"] let r = {x: 3, y: "hello"};

  Warning Dead Module
  File "./FirstClassModulesInterface.rei", line 0, characters 0-0
  FirstClassModulesInterface is a dead module as all its items are dead.

  Warning Dead Type
  File "./FirstClassModulesInterface.rei", line 3, characters 2-8
  record.x is a record label never used to read a value
  <-- line 3
    [@dead "record.x"] x: int,

  Warning Dead Type
  File "./FirstClassModulesInterface.rei", line 4, characters 2-11
  record.y is a record label never used to read a value
  <-- line 4
    [@dead "record.y"] y: string,

  Warning Dead Value
  File "./FirstClassModulesInterface.rei", line 7, characters 0-13
  +r is never used
  <-- line 7
  [@dead "+r"] let r: record;

  Warning Dead Value
  File "./ImmutableArray.re", line 6, characters 2-63
  +fromTp is never used
  <-- line 6
    [@dead "+fromTp"] external fromTp: t(('a, 'b)) => array(('a, 'b)) = "%identity";

  Warning Dead Value
  File "./ImmutableArray.re", line 7, characters 2-61
  +fromTT is never used
  <-- line 7
    [@dead "+fromTT"] external fromTT: t(t('a)) => array(array('a)) = "%identity";

  Warning Dead Value
  File "./ImmutableArray.re", line 9, characters 2-61
  +toTp is never used
  <-- line 9
    [@dead "+toTp"] external toTp: array(('a, 'b)) => t(('a, 'b)) = "%identity";

  Warning Dead Value
  File "./ImmutableArray.re", line 10, characters 2-59
  +toT2 is never used
  <-- line 10
    [@dead "+toT2"] external toT2: array2('a) => (t('a), t('a)) = "%identity";

  Warning Dead Value
  File "./ImmutableArray.re", line 16, characters 2-41
  +toArray is never used
  <-- line 16
    [@dead "+toArray"] let toArray = a => Array.copy(a->fromT);

  Warning Dead Value
  File "./ImmutableArray.re", line 20, characters 2-42
  +length is never used
  <-- line 20
    [@dead "+length"] let length = a => Array.length(a->fromT);

  Warning Dead Value
  File "./ImmutableArray.re", line 22, characters 2-38
  +size is never used
  <-- line 22
    [@dead "+size"] let size = a => Array.size(a->fromT);

  Warning Dead Value
  File "./ImmutableArray.re", line 26, characters 2-50
  +getExn is never used
  <-- line 26
    [@dead "+getExn"] let getExn = (a, x) => Array.getExn(a->fromT, x);

  Warning Dead Value
  File "./ImmutableArray.re", line 28, characters 2-56
  +getUnsafe is never used
  <-- line 28
    [@dead "+getUnsafe"] let getUnsafe = (a, x) => Array.getUnsafe(a->fromT, x);

  Warning Dead Value
  File "./ImmutableArray.re", line 30, characters 2-62
  +getUndefined is never used
  <-- line 30
    [@dead "+getUndefined"] let getUndefined = (a, x) => Array.getUndefined(a->fromT, x);

  Warning Dead Value
  File "./ImmutableArray.re", line 32, characters 2-49
  +shuffle is never used
  <-- line 32
    [@dead "+shuffle"] let shuffle = x => Array.shuffle(x->fromT)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 34, characters 2-49
  +reverse is never used
  <-- line 34
    [@dead "+reverse"] let reverse = x => Array.reverse(x->fromT)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 36, characters 2-62
  +makeUninitialized is never used
  <-- line 36
    [@dead "+makeUninitialized"] let makeUninitialized = x => Array.makeUninitialized(x)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 38, characters 2-74
  +makeUninitializedUnsafe is never used
  <-- line 38
    [@dead "+makeUninitializedUnsafe"] let makeUninitializedUnsafe = x => Array.makeUninitializedUnsafe(x)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 40, characters 2-44
  +make is never used
  <-- line 40
    [@dead "+make"] let make = (x, y) => Array.make(x, y)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 42, characters 2-46
  +range is never used
  <-- line 42
    [@dead "+range"] let range = (x, y) => Array.range(x, y)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 44, characters 2-64
  +rangeBy is never used
  <-- line 44
    [@dead "+rangeBy"] let rangeBy = (x, y, ~step) => Array.rangeBy(x, y, ~step)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 46, characters 2-50
  +makeByU is never used
  <-- line 46
    [@dead "+makeByU"] let makeByU = (c, f) => Array.makeByU(c, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 47, characters 2-48
  +makeBy is never used
  <-- line 47
    [@dead "+makeBy"] let makeBy = (c, f) => Array.makeBy(c, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 49, characters 2-70
  +makeByAndShuffleU is never used
  <-- line 49
    [@dead "+makeByAndShuffleU"] let makeByAndShuffleU = (c, f) => Array.makeByAndShuffleU(c, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 50, characters 2-68
  +makeByAndShuffle is never used
  <-- line 50
    [@dead "+makeByAndShuffle"] let makeByAndShuffle = (c, f) => Array.makeByAndShuffle(c, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 52, characters 2-61
  +zip is never used
  <-- line 52
    [@dead "+zip"] let zip = (a1, a2) => Array.zip(fromT(a1), fromT(a2))->toTp;

  Warning Dead Value
  File "./ImmutableArray.re", line 54, characters 2-72
  +zipByU is never used
  <-- line 54
    [@dead "+zipByU"] let zipByU = (a1, a2, f) => Array.zipByU(fromT(a1), fromT(a2), f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 55, characters 2-70
  +zipBy is never used
  <-- line 55
    [@dead "+zipBy"] let zipBy = (a1, a2, f) => Array.zipBy(fromT(a1), fromT(a2), f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 57, characters 2-47
  +unzip is never used
  <-- line 57
    [@dead "+unzip"] let unzip = a => Array.unzip(a->fromTp)->toT2;

  Warning Dead Value
  File "./ImmutableArray.re", line 59, characters 2-66
  +concat is never used
  <-- line 59
    [@dead "+concat"] let concat = (a1, a2) => Array.concat(a1->fromT, a2->fromT)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 61, characters 2-67
  +concatMany is never used
  <-- line 61
    [@dead "+concatMany"] let concatMany = (a: t(t(_))) => Array.concatMany(a->fromTT)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 63, characters 2-81
  +slice is never used
  <-- line 63
    [@dead "+slice"] let slice = (a, ~offset, ~len) =>

  Warning Dead Value
  File "./ImmutableArray.re", line 66, characters 2-63
  +sliceToEnd is never used
  <-- line 66
    [@dead "+sliceToEnd"] let sliceToEnd = (a, b) => Array.sliceToEnd(a->fromT, b)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 68, characters 2-43
  +copy is never used
  <-- line 68
    [@dead "+copy"] let copy = a => Array.copy(a->fromT)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 70, characters 2-54
  +forEachU is never used
  <-- line 70
    [@dead "+forEachU"] let forEachU = (a, f) => Array.forEachU(a->fromT, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 71, characters 2-52
  +forEach is never used
  <-- line 71
    [@dead "+forEach"] let forEach = (a, f) => Array.forEach(a->fromT, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 73, characters 2-51
  +mapU is never used
  <-- line 73
    [@dead "+mapU"] let mapU = (a, f) => Array.mapU(a->fromT, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 74, characters 2-49
  +map is never used
  <-- line 74
    [@dead "+map"] let map = (a, f) => Array.map(a->fromT, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 76, characters 2-71
  +keepWithIndexU is never used
  <-- line 76
    [@dead "+keepWithIndexU"] let keepWithIndexU = (a, f) => Array.keepWithIndexU(a->fromT, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 77, characters 2-69
  +keepWithIndex is never used
  <-- line 77
    [@dead "+keepWithIndex"] let keepWithIndex = (a, f) => Array.keepWithIndex(a->fromT, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 79, characters 2-59
  +keepMapU is never used
  <-- line 79
    [@dead "+keepMapU"] let keepMapU = (a, f) => Array.keepMapU(a->fromT, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 80, characters 2-57
  +keepMap is never used
  <-- line 80
    [@dead "+keepMap"] let keepMap = (a, f) => Array.keepMap(a->fromT, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 82, characters 2-72
  +forEachWithIndexU is never used
  <-- line 82
    [@dead "+forEachWithIndexU"] let forEachWithIndexU = (a, f) => Array.forEachWithIndexU(a->fromT, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 83, characters 2-70
  +forEachWithIndex is never used
  <-- line 83
    [@dead "+forEachWithIndex"] let forEachWithIndex = (a, f) => Array.forEachWithIndex(a->fromT, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 85, characters 2-69
  +mapWithIndexU is never used
  <-- line 85
    [@dead "+mapWithIndexU"] let mapWithIndexU = (a, f) => Array.mapWithIndexU(a->fromT, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 86, characters 2-67
  +mapWithIndex is never used
  <-- line 86
    [@dead "+mapWithIndex"] let mapWithIndex = (a, f) => Array.mapWithIndex(a->fromT, f)->toT;

  Warning Dead Value
  File "./ImmutableArray.re", line 88, characters 2-64
  +partitionU is never used
  <-- line 88
    [@dead "+partitionU"] let partitionU = (a, f) => Array.partitionU(a->fromT, f)->toT2;

  Warning Dead Value
  File "./ImmutableArray.re", line 89, characters 2-62
  +partition is never used
  <-- line 89
    [@dead "+partition"] let partition = (a, f) => Array.partition(a->fromT, f)->toT2;

  Warning Dead Value
  File "./ImmutableArray.re", line 91, characters 2-58
  +reduceU is never used
  <-- line 91
    [@dead "+reduceU"] let reduceU = (a, b, f) => Array.reduceU(a->fromT, b, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 92, characters 2-56
  +reduce is never used
  <-- line 92
    [@dead "+reduce"] let reduce = (a, b, f) => Array.reduce(a->fromT, b, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 94, characters 2-72
  +reduceReverseU is never used
  <-- line 94
    [@dead "+reduceReverseU"] let reduceReverseU = (a, b, f) => Array.reduceReverseU(a->fromT, b, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 95, characters 2-70
  +reduceReverse is never used
  <-- line 95
    [@dead "+reduceReverse"] let reduceReverse = (a, b, f) => Array.reduceReverse(a->fromT, b, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 97, characters 2-95
  +reduceReverse2U is never used
  <-- line 97
    [@dead "+reduceReverse2U"] let reduceReverse2U = (a1, a2, c, f) =>

  Warning Dead Value
  File "./ImmutableArray.re", line 99, characters 2-93
  +reduceReverse2 is never used
  <-- line 99
    [@dead "+reduceReverse2"] let reduceReverse2 = (a1, a2, c, f) =>

  Warning Dead Value
  File "./ImmutableArray.re", line 102, characters 2-48
  +someU is never used
  <-- line 102
    [@dead "+someU"] let someU = (a, f) => Array.someU(a->fromT, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 103, characters 2-46
  +some is never used
  <-- line 103
    [@dead "+some"] let some = (a, f) => Array.some(a->fromT, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 105, characters 2-50
  +everyU is never used
  <-- line 105
    [@dead "+everyU"] let everyU = (a, f) => Array.everyU(a->fromT, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 106, characters 2-48
  +every is never used
  <-- line 106
    [@dead "+every"] let every = (a, f) => Array.every(a->fromT, f);

  Warning Dead Value
  File "./ImmutableArray.re", line 108, characters 2-69
  +every2U is never used
  <-- line 108
    [@dead "+every2U"] let every2U = (a1, a2, f) => Array.every2U(fromT(a1), fromT(a2), f);

  Warning Dead Value
  File "./ImmutableArray.re", line 109, characters 2-67
  +every2 is never used
  <-- line 109
    [@dead "+every2"] let every2 = (a1, a2, f) => Array.every2(fromT(a1), fromT(a2), f);

  Warning Dead Value
  File "./ImmutableArray.re", line 111, characters 2-67
  +some2U is never used
  <-- line 111
    [@dead "+some2U"] let some2U = (a1, a2, f) => Array.some2U(fromT(a1), fromT(a2), f);

  Warning Dead Value
  File "./ImmutableArray.re", line 112, characters 2-65
  +some2 is never used
  <-- line 112
    [@dead "+some2"] let some2 = (a1, a2, f) => Array.some2(fromT(a1), fromT(a2), f);

  Warning Dead Value
  File "./ImmutableArray.re", line 114, characters 2-63
  +cmpU is never used
  <-- line 114
    [@dead "+cmpU"] let cmpU = (a1, a2, f) => Array.cmpU(fromT(a1), fromT(a2), f);

  Warning Dead Value
  File "./ImmutableArray.re", line 115, characters 2-61
  +cmp is never used
  <-- line 115
    [@dead "+cmp"] let cmp = (a1, a2, f) => Array.cmp(fromT(a1), fromT(a2), f);

  Warning Dead Value
  File "./ImmutableArray.re", line 117, characters 2-61
  +eqU is never used
  <-- line 117
    [@dead "+eqU"] let eqU = (a1, a2, f) => Array.eqU(fromT(a1), fromT(a2), f);

  Warning Dead Value
  File "./ImmutableArray.re", line 118, characters 2-59
  +eq is never used
  <-- line 118
    [@dead "+eq"] let eq = (a1, a2, f) => Array.eq(fromT(a1), fromT(a2), f);

  Warning Dead Value
  File "./ImmutableArray.rei", line 10, characters 0-31
  +toArray is never used
  <-- line 10
  [@dead "+toArray"] let toArray: t('a) => array('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 12, characters 0-99
  +length is never used
  <-- line 12
  [@dead "+length"] /** Subset of the Belt.Array oprerations that do not mutate the array. */

  Warning Dead Value
  File "./ImmutableArray.rei", line 16, characters 0-22
  +size is never used
  <-- line 16
  [@dead "+size"] let size: t('a) => int;

  Warning Dead Value
  File "./ImmutableArray.rei", line 18, characters 0-35
  +get is never used
  <-- line 18
  [@dead "+get"] let get: (t('a), int) => option('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 20, characters 0-30
  +getExn is never used
  <-- line 20
  [@dead "+getExn"] let getExn: (t('a), int) => 'a;

  Warning Dead Value
  File "./ImmutableArray.rei", line 22, characters 0-33
  +getUnsafe is never used
  <-- line 22
  [@dead "+getUnsafe"] let getUnsafe: (t('a), int) => 'a;

  Warning Dead Value
  File "./ImmutableArray.rei", line 24, characters 0-50
  +getUndefined is never used
  <-- line 24
  [@dead "+getUndefined"] let getUndefined: (t('a), int) => Js.undefined('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 26, characters 0-27
  +shuffle is never used
  <-- line 26
  [@dead "+shuffle"] let shuffle: t('a) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 28, characters 0-27
  +reverse is never used
  <-- line 28
  [@dead "+reverse"] let reverse: t('a) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 30, characters 0-49
  +makeUninitialized is never used
  <-- line 30
  [@dead "+makeUninitialized"] let makeUninitialized: int => t(Js.undefined('a));

  Warning Dead Value
  File "./ImmutableArray.rei", line 32, characters 0-41
  +makeUninitializedUnsafe is never used
  <-- line 32
  [@dead "+makeUninitializedUnsafe"] let makeUninitializedUnsafe: int => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 34, characters 0-28
  +make is never used
  <-- line 34
  [@dead "+make"] let make: (int, 'a) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 36, characters 0-31
  +range is never used
  <-- line 36
  [@dead "+range"] let range: (int, int) => t(int);

  Warning Dead Value
  File "./ImmutableArray.rei", line 38, characters 0-45
  +rangeBy is never used
  <-- line 38
  [@dead "+rangeBy"] let rangeBy: (int, int, ~step: int) => t(int);

  Warning Dead Value
  File "./ImmutableArray.rei", line 40, characters 0-42
  +makeByU is never used
  <-- line 40
  [@dead "+makeByU"] let makeByU: (int, (. int) => 'a) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 41, characters 0-37
  +makeBy is never used
  <-- line 41
  [@dead "+makeBy"] let makeBy: (int, int => 'a) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 43, characters 0-52
  +makeByAndShuffleU is never used
  <-- line 43
  [@dead "+makeByAndShuffleU"] let makeByAndShuffleU: (int, (. int) => 'a) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 44, characters 0-47
  +makeByAndShuffle is never used
  <-- line 44
  [@dead "+makeByAndShuffle"] let makeByAndShuffle: (int, int => 'a) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 46, characters 0-38
  +zip is never used
  <-- line 46
  [@dead "+zip"] let zip: (t('a), t('b)) => t(('a, 'b));

  Warning Dead Value
  File "./ImmutableArray.rei", line 48, characters 0-53
  +zipByU is never used
  <-- line 48
  [@dead "+zipByU"] let zipByU: (t('a), t('b), (. 'a, 'b) => 'c) => t('c);

  Warning Dead Value
  File "./ImmutableArray.rei", line 49, characters 0-50
  +zipBy is never used
  <-- line 49
  [@dead "+zipBy"] let zipBy: (t('a), t('b), ('a, 'b) => 'c) => t('c);

  Warning Dead Value
  File "./ImmutableArray.rei", line 51, characters 0-40
  +unzip is never used
  <-- line 51
  [@dead "+unzip"] let unzip: t(('a, 'a)) => (t('a), t('a));

  Warning Dead Value
  File "./ImmutableArray.rei", line 53, characters 0-35
  +concat is never used
  <-- line 53
  [@dead "+concat"] let concat: (t('a), t('a)) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 55, characters 0-33
  +concatMany is never used
  <-- line 55
  [@dead "+concatMany"] let concatMany: t(t('a)) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 57, characters 0-52
  +slice is never used
  <-- line 57
  [@dead "+slice"] let slice: (t('a), ~offset: int, ~len: int) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 59, characters 0-37
  +sliceToEnd is never used
  <-- line 59
  [@dead "+sliceToEnd"] let sliceToEnd: (t('a), int) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 61, characters 0-24
  +copy is never used
  <-- line 61
  [@dead "+copy"] let copy: t('a) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 63, characters 0-45
  +forEachU is never used
  <-- line 63
  [@dead "+forEachU"] let forEachU: (t('a), (. 'a) => unit) => unit;

  Warning Dead Value
  File "./ImmutableArray.rei", line 64, characters 0-40
  +forEach is never used
  <-- line 64
  [@dead "+forEach"] let forEach: (t('a), 'a => unit) => unit;

  Warning Dead Value
  File "./ImmutableArray.rei", line 66, characters 0-40
  +mapU is never used
  <-- line 66
  [@dead "+mapU"] let mapU: (t('a), (. 'a) => 'b) => t('b);

  Warning Dead Value
  File "./ImmutableArray.rei", line 67, characters 0-35
  +map is never used
  <-- line 67
  [@dead "+map"] let map: (t('a), 'a => 'b) => t('b);

  Warning Dead Value
  File "./ImmutableArray.rei", line 69, characters 0-57
  +keepWithIndexU is never used
  <-- line 69
  [@dead "+keepWithIndexU"] let keepWithIndexU: (t('a), (. 'a, int) => bool) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 70, characters 0-54
  +keepWithIndex is never used
  <-- line 70
  [@dead "+keepWithIndex"] let keepWithIndex: (t('a), ('a, int) => bool) => t('a);

  Warning Dead Value
  File "./ImmutableArray.rei", line 72, characters 0-52
  +keepMapU is never used
  <-- line 72
  [@dead "+keepMapU"] let keepMapU: (t('a), (. 'a) => option('b)) => t('b);

  Warning Dead Value
  File "./ImmutableArray.rei", line 73, characters 0-47
  +keepMap is never used
  <-- line 73
  [@dead "+keepMap"] let keepMap: (t('a), 'a => option('b)) => t('b);

  Warning Dead Value
  File "./ImmutableArray.rei", line 75, characters 0-59
  +forEachWithIndexU is never used
  <-- line 75
  [@dead "+forEachWithIndexU"] let forEachWithIndexU: (t('a), (. int, 'a) => unit) => unit;

  Warning Dead Value
  File "./ImmutableArray.rei", line 76, characters 0-56
  +forEachWithIndex is never used
  <-- line 76
  [@dead "+forEachWithIndex"] let forEachWithIndex: (t('a), (int, 'a) => unit) => unit;

  Warning Dead Value
  File "./ImmutableArray.rei", line 78, characters 0-54
  +mapWithIndexU is never used
  <-- line 78
  [@dead "+mapWithIndexU"] let mapWithIndexU: (t('a), (. int, 'a) => 'b) => t('b);

  Warning Dead Value
  File "./ImmutableArray.rei", line 79, characters 0-51
  +mapWithIndex is never used
  <-- line 79
  [@dead "+mapWithIndex"] let mapWithIndex: (t('a), (int, 'a) => 'b) => t('b);

  Warning Dead Value
  File "./ImmutableArray.rei", line 81, characters 0-57
  +partitionU is never used
  <-- line 81
  [@dead "+partitionU"] let partitionU: (t('a), (. 'a) => bool) => (t('a), t('a));

  Warning Dead Value
  File "./ImmutableArray.rei", line 82, characters 0-52
  +partition is never used
  <-- line 82
  [@dead "+partition"] let partition: (t('a), 'a => bool) => (t('a), t('a));

  Warning Dead Value
  File "./ImmutableArray.rei", line 84, characters 0-48
  +reduceU is never used
  <-- line 84
  [@dead "+reduceU"] let reduceU: (t('a), 'b, (. 'b, 'a) => 'b) => 'b;

  Warning Dead Value
  File "./ImmutableArray.rei", line 85, characters 0-45
  +reduce is never used
  <-- line 85
  [@dead "+reduce"] let reduce: (t('a), 'b, ('b, 'a) => 'b) => 'b;

  Warning Dead Value
  File "./ImmutableArray.rei", line 87, characters 0-55
  +reduceReverseU is never used
  <-- line 87
  [@dead "+reduceReverseU"] let reduceReverseU: (t('a), 'b, (. 'b, 'a) => 'b) => 'b;

  Warning Dead Value
  File "./ImmutableArray.rei", line 88, characters 0-52
  +reduceReverse is never used
  <-- line 88
  [@dead "+reduceReverse"] let reduceReverse: (t('a), 'b, ('b, 'a) => 'b) => 'b;

  Warning Dead Value
  File "./ImmutableArray.rei", line 90, characters 0-67
  +reduceReverse2U is never used
  <-- line 90
  [@dead "+reduceReverse2U"] let reduceReverse2U: (t('a), t('b), 'c, (. 'c, 'a, 'b) => 'c) => 'c;

  Warning Dead Value
  File "./ImmutableArray.rei", line 91, characters 0-64
  +reduceReverse2 is never used
  <-- line 91
  [@dead "+reduceReverse2"] let reduceReverse2: (t('a), t('b), 'c, ('c, 'a, 'b) => 'c) => 'c;

  Warning Dead Value
  File "./ImmutableArray.rei", line 93, characters 0-42
  +someU is never used
  <-- line 93
  [@dead "+someU"] let someU: (t('a), (. 'a) => bool) => bool;

  Warning Dead Value
  File "./ImmutableArray.rei", line 94, characters 0-37
  +some is never used
  <-- line 94
  [@dead "+some"] let some: (t('a), 'a => bool) => bool;

  Warning Dead Value
  File "./ImmutableArray.rei", line 96, characters 0-43
  +everyU is never used
  <-- line 96
  [@dead "+everyU"] let everyU: (t('a), (. 'a) => bool) => bool;

  Warning Dead Value
  File "./ImmutableArray.rei", line 97, characters 0-38
  +every is never used
  <-- line 97
  [@dead "+every"] let every: (t('a), 'a => bool) => bool;

  Warning Dead Value
  File "./ImmutableArray.rei", line 99, characters 0-55
  +every2U is never used
  <-- line 99
  [@dead "+every2U"] let every2U: (t('a), t('b), (. 'a, 'b) => bool) => bool;

  Warning Dead Value
  File "./ImmutableArray.rei", line 100, characters 0-52
  +every2 is never used
  <-- line 100
  [@dead "+every2"] let every2: (t('a), t('b), ('a, 'b) => bool) => bool;

  Warning Dead Value
  File "./ImmutableArray.rei", line 102, characters 0-54
  +some2U is never used
  <-- line 102
  [@dead "+some2U"] let some2U: (t('a), t('b), (. 'a, 'b) => bool) => bool;

  Warning Dead Value
  File "./ImmutableArray.rei", line 103, characters 0-51
  +some2 is never used
  <-- line 103
  [@dead "+some2"] let some2: (t('a), t('b), ('a, 'b) => bool) => bool;

  Warning Dead Value
  File "./ImmutableArray.rei", line 105, characters 0-50
  +cmpU is never used
  <-- line 105
  [@dead "+cmpU"] let cmpU: (t('a), t('a), (. 'a, 'a) => int) => int;

  Warning Dead Value
  File "./ImmutableArray.rei", line 106, characters 0-47
  +cmp is never used
  <-- line 106
  [@dead "+cmp"] let cmp: (t('a), t('a), ('a, 'a) => int) => int;

  Warning Dead Value
  File "./ImmutableArray.rei", line 108, characters 0-51
  +eqU is never used
  <-- line 108
  [@dead "+eqU"] let eqU: (t('a), t('a), (. 'a, 'a) => bool) => bool;

  Warning Dead Value
  File "./ImmutableArray.rei", line 109, characters 0-48
  +eq is never used
  <-- line 109
  [@dead "+eq"] let eq: (t('a), t('a), ('a, 'a) => bool) => bool;

  Warning Dead Type
  File "./ImportHookDefault.re", line 2, characters 2-14
  person.name is a record label never used to read a value
  <-- line 2
    [@dead "person.name"] name: string,

  Warning Dead Type
  File "./ImportHookDefault.re", line 3, characters 2-10
  person.age is a record label never used to read a value
  <-- line 3
    [@dead "person.age"] age: int,

  Warning Dead Type
  File "./ImportHooks.re", line 3, characters 2-14
  person.name is a record label never used to read a value
  <-- line 3
    [@dead "person.name"] name: string,

  Warning Dead Type
  File "./ImportHooks.re", line 4, characters 2-10
  person.age is a record label never used to read a value
  <-- line 4
    [@dead "person.age"] age: int,

  Warning Dead Type
  File "./ImportJsValue.re", line 10, characters 2-8
  point.x is a record label never used to read a value
  <-- line 10
    [@dead "point.x"] x: int,

  Warning Dead Type
  File "./ImportJsValue.re", line 11, characters 2-16
  point.y is a record label never used to read a value
  <-- line 11
    [@dead "point.y"] y: option(int),

  Warning Dead Type
  File "./ImportJsValue.re", line 65, characters 4-10
  variant.I is a variant case which is never constructed
  <-- line 65
    | [@dead "variant.I"] I(int)

  Warning Dead Type
  File "./ImportJsValue.re", line 66, characters 4-13
  variant.S is a variant case which is never constructed
  <-- line 66
    | [@dead "variant.S"] S(string);

  Warning Dead Type
  File "./ImportMyBanner.re", line 6, characters 16-28
  message.text is a record label never used to read a value
  <-- line 6
  type message = {[@dead "message.text"] text: string};

  Warning Dead Value
  File "./ImportMyBanner.re", line 19, characters 0-15
  +make is never used
  <-- line 19
  [@dead "+make"] let make = make;

  Warning Dead Value
  File "./ManyComponents.re", line 4, characters 2-45
  InnerComponent.+someValueSoModuleOffsetsAreShifted is never used
  <-- line 4
    [@dead "InnerComponent.+someValueSoModuleOffsetsAreShifted"] let someValueSoModuleOffsetsAreShifted = 77;

  Warning Dead Module
  File "./ModuleAliases.re", line 2, characters 2-57
  +ModuleAliases.Outer.Inner is a dead module as all its items are dead.

  Warning Dead Type
  File "./ModuleAliases.re", line 3, characters 19-32
  Outer.Inner.innerT.inner is a record label never used to read a value
  <-- line 3
      type innerT = {[@dead "Outer.Inner.innerT.inner"] inner: string};

  Warning Dead Module
  File "./ModuleAliases.re", line 10, characters 4-62
  +ModuleAliases.Outer2.Inner2.InnerNested is a dead module as all its items are dead.

  Warning Dead Type
  File "./ModuleAliases.re", line 11, characters 16-27
  Outer2.Inner2.InnerNested.t.nested is a record label never used to read a value
  <-- line 11
        type t = {[@dead "Outer2.Inner2.InnerNested.t.nested"] nested: int};

  Warning Dead Module
  File "./ModuleAliases2.re", line 0, characters 0-0
  +ModuleAliases2 is a dead module as all its items are dead.

  Warning Dead Type
  File "./ModuleAliases2.re", line 3, characters 2-8
  record.x is a record label never used to read a value
  <-- line 3
    [@dead "record.x"] x: int,

  Warning Dead Type
  File "./ModuleAliases2.re", line 4, characters 2-11
  record.y is a record label never used to read a value
  <-- line 4
    [@dead "record.y"] y: string,

  Warning Dead Module
  File "./ModuleAliases2.re", line 7, characters 0-137
  +ModuleAliases2.Outer is a dead module as all its items are dead.

  Warning Dead Type
  File "./ModuleAliases2.re", line 9, characters 16-29
  Outer.outer.outer is a record label never used to read a value
  <-- line 9
    type outer = {[@dead "Outer.outer.outer"] outer: string};

  Warning Dead Module
  File "./ModuleAliases2.re", line 11, characters 2-71
  +ModuleAliases2.Outer.Inner is a dead module as all its items are dead.

  Warning Dead Type
  File "./ModuleAliases2.re", line 13, characters 18-31
  Outer.Inner.inner.inner is a record label never used to read a value
  <-- line 13
      type inner = {[@dead "Outer.Inner.inner.inner"] inner: string};

  Warning Dead Value
  File "./ModuleAliases2.re", line 21, characters 0-10
  +q is never used
  <-- line 21
  [@dead "+q"] let q = 42;

  Warning Dead Value
  File "./NestedModules.re", line 8, characters 2-22
  Universe.+notExported is never used
  <-- line 8
    [@dead "Universe.+notExported"] let notExported = 33;

  Warning Dead Value
  File "./NestedModules.re", line 14, characters 4-13
  Universe.Nested2.+x is never used
  <-- line 14
      [@dead "Universe.Nested2.+x"] let x = 0;

  Warning Dead Value
  File "./NestedModules.re", line 19, characters 4-13
  Universe.Nested2.+y is never used
  <-- line 19
      [@dead "Universe.Nested2.+y"] let y = 2;

  Warning Dead Value
  File "./NestedModules.re", line 25, characters 6-15
  Universe.Nested2.Nested3.+x is never used
  <-- line 25
        [@dead "Universe.Nested2.Nested3.+x"] let x = 0;

  Warning Dead Value
  File "./NestedModules.re", line 26, characters 6-15
  Universe.Nested2.Nested3.+y is never used
  <-- line 26
        [@dead "Universe.Nested2.Nested3.+y"] let y = 1;

  Warning Dead Value
  File "./NestedModules.re", line 27, characters 6-15
  Universe.Nested2.Nested3.+z is never used
  <-- line 27
        [@dead "Universe.Nested2.Nested3.+z"] let z = 2;

  Warning Dead Value
  File "./NestedModules.re", line 28, characters 6-15
  Universe.Nested2.Nested3.+w is never used
  <-- line 28
        [@dead "Universe.Nested2.Nested3.+w"] let w = 3;

  Warning Dead Type
  File "./NestedModules.re", line 46, characters 6-7
  Universe.variant.A is a variant case which is never constructed
  <-- line 46
      | [@dead "Universe.variant.A"] A

  Warning Dead Type
  File "./NestedModules.re", line 47, characters 6-15
  Universe.variant.B is a variant case which is never constructed
  <-- line 47
      | [@dead "Universe.variant.B"] B(string);

  Warning Dead Type
  File "./Opaque.re", line 3, characters 4-20
  opaqueFromRecords.A is a variant case which is never constructed
  <-- line 3
    | [@dead "opaqueFromRecords.A"] A(Records.coord);

  Warning Dead Value
  File "./OptArg.rei", line 1, characters 0-54
  +foo is never used
  <-- line 1
  [@dead "+foo"] let foo: (~x: int=?, ~y: int=?, ~z: int=?, int) => int;

  Warning Dead Type
  File "./Records.re", line 22, characters 2-14
  person.name is a record label never used to read a value
  <-- line 22
    [@dead "person.name"] name: string,

  Warning Dead Type
  File "./Records.re", line 23, characters 2-10
  person.age is a record label never used to read a value
  <-- line 23
    [@dead "person.age"] age: int,

  Warning Dead Type
  File "./Records.re", line 29, characters 2-14
  business.name is a record label never used to read a value
  <-- line 29
    [@dead "business.name"] name: string,

  Warning Dead Type
  File "./Records.re", line 56, characters 2-10
  payload.num is a record label never used to read a value
  <-- line 56
    [@dead "payload.num"] num: int,

  Warning Dead Type
  File "./Records.re", line 66, characters 2-8
  record.w is a record label never used to read a value
  <-- line 66
    [@dead "record.w"] w: int,

  Warning Dead Type
  File "./Records.re", line 86, characters 2-14
  business2.name is a record label never used to read a value
  <-- line 86
    [@dead "business2.name"] name: string,

  Warning Dead Type
  File "./Records.re", line 87, characters 2-30
  business2.owner is a record label never used to read a value
  <-- line 87
    [@dead "business2.owner"] owner: Js.Nullable.t(person),

  Warning Dead Type
  File "./References.re", line 39, characters 27-33
  requiresConversion.x is a record label never used to read a value
  <-- line 39
  type requiresConversion = {[@dead "requiresConversion.x"] x: int};

  Warning Dead Type
  File "./RepeatedLabel.re", line 2, characters 2-9
  userData.a is a record label never used to read a value
  <-- line 2
    [@dead "userData.a"] a: bool,

  Warning Dead Type
  File "./RepeatedLabel.re", line 3, characters 2-8
  userData.b is a record label never used to read a value
  <-- line 3
    [@dead "userData.b"] b: int,

  Warning Dead Type
  File "./RepeatedLabel.re", line 9, characters 2-11
  tabState.f is a record label never used to read a value
  <-- line 9
    [@dead "tabState.f"] f: string,

  Warning Dead Module
  File "./RequireCond.re", line 0, characters 0-0
  +RequireCond is a dead module as all its items are dead.

  Warning Dead Value
  File "./RequireCond.re", line 1, characters 0-288
  +make is never used
  <-- line 1
  [@dead "+make"] [@bs.module]

  Warning Dead Value
  File "./RequireCond.re", line 14, characters 0-351
  +either is never used
  <-- line 14
  [@dead "+either"] [@bs.module]

  Warning Dead Value
  File "./Shadow.re", line 11, characters 2-22
  M.+test is never used
  <-- line 11
    [@dead "M.+test"] let test = () => "a";

  Warning Dead Value
  File "./TestImmutableArray.re", line 9, characters 0-43
  +testBeltArrayGet is never used
  <-- line 9
  [@dead "+testBeltArrayGet"] let testBeltArrayGet = arr => Belt.(arr[3]);

  Warning Dead Value
  File "./TestImmutableArray.re", line 11, characters 0-47
  +testBeltArraySet is never used
  <-- line 11
  [@dead "+testBeltArraySet"] let testBeltArraySet = arr => Belt.(arr[3] = 4);

  Warning Dead Value
  File "./TestImport.re", line 18, characters 0-43
  +innerStuffContents is never used
  <-- line 18
  [@dead "+innerStuffContents"] let innerStuffContents = innerStuffContents;

  Warning Dead Type
  File "./TestImport.re", line 28, characters 16-28
  message.text is a record label never used to read a value
  <-- line 28
  type message = {[@dead "message.text"] text: string};

  Warning Dead Value
  File "./TestImport.re", line 42, characters 0-15
  +make is never used
  <-- line 42
  [@dead "+make"] let make = make;

  Warning Dead Type
  File "./TestPromise.re", line 6, characters 2-8
  fromPayload.x is a record label never used to read a value
  <-- line 6
    [@dead "fromPayload.x"] x: int,

  Warning Dead Type
  File "./TestPromise.re", line 11, characters 18-32
  toPayload.result is a record label never used to read a value
  <-- line 11
  type toPayload = {[@dead "toPayload.result"] result: string};

  Warning Dead Module
  File "./TransitiveType2.re", line 0, characters 0-0
  +TransitiveType2 is a dead module as all its items are dead.

  Warning Dead Value
  File "./TransitiveType2.re", line 7, characters 0-28
  +convertT2 is never used
  <-- line 7
  [@dead "+convertT2"] let convertT2 = (x: t2) => x;

  Warning Dead Type
  File "./TransitiveType3.re", line 3, characters 2-8
  t3.i is a record label never used to read a value
  <-- line 3
    [@dead "t3.i"] i: int,

  Warning Dead Type
  File "./TransitiveType3.re", line 4, characters 2-11
  t3.s is a record label never used to read a value
  <-- line 4
    [@dead "t3.s"] s: string,

  Warning Dead Module
  File "./TypeParams1.re", line 0, characters 0-0
  +TypeParams1 is a dead module as all its items are dead.

  Warning Dead Value
  File "./TypeParams1.re", line 4, characters 0-24
  +exportSomething is never used
  <-- line 4
  [@dead "+exportSomething"] let exportSomething = 10;

  Warning Dead Module
  File "./TypeParams2.re", line 0, characters 0-0
  +TypeParams2 is a dead module as all its items are dead.

  Warning Dead Type
  File "./TypeParams2.re", line 2, characters 13-20
  item.id is a record label never used to read a value
  <-- line 2
  type item = {[@dead "item.id"] id: int};

  Warning Dead Value
  File "./TypeParams2.re", line 10, characters 0-24
  +exportSomething is never used
  <-- line 10
  [@dead "+exportSomething"] let exportSomething = 10;

  Warning Dead Type
  File "./Types.re", line 12, characters 4-13
  typeWithVars.A is a variant case which is never constructed
  <-- line 12
    | [@dead "typeWithVars.A"] A('x, 'y)

  Warning Dead Type
  File "./Types.re", line 13, characters 4-9
  typeWithVars.B is a variant case which is never constructed
  <-- line 13
    | [@dead "typeWithVars.B"] B('z);

  Warning Dead Type
  File "./Types.re", line 39, characters 26-47
  mutuallyRecursiveB.a is a record label never used to read a value
  <-- line 39
  and mutuallyRecursiveB = {[@dead "mutuallyRecursiveB.a"] a: mutuallyRecursiveA};

  Warning Dead Type
  File "./Types.re", line 60, characters 4-5
  opaqueVariant.A is a variant case which is never constructed
  <-- line 60
    | [@dead "opaqueVariant.A"] A

  Warning Dead Type
  File "./Types.re", line 61, characters 4-5
  opaqueVariant.B is a variant case which is never constructed
  <-- line 61
    | [@dead "opaqueVariant.B"] B;

  Warning Dead Type
  File "./Types.re", line 91, characters 2-8
  record.i is a record label never used to read a value
  <-- line 91
    [@dead "record.i"] i: int,

  Warning Dead Type
  File "./Types.re", line 92, characters 2-11
  record.s is a record label never used to read a value
  <-- line 92
    [@dead "record.s"] s: string,

  Warning Dead Type
  File "./Types.re", line 139, characters 19-26
  someRecord.id is a record label never used to read a value
  <-- line 139
  type someRecord = {[@dead "someRecord.id"] id: int};

  Warning Dead Module
  File "./Types.re", line 168, characters 0-84
  +Types.ObjectId is a dead module as all its items are dead.

  Warning Dead Value
  File "./Types.re", line 173, characters 2-11
  ObjectId.+x is never used
  <-- line 173
    [@dead "ObjectId.+x"] let x = 1;

  Warning Dead Type
  File "./Unboxed.re", line 4, characters 4-10
  v1.A is a variant case which is never constructed
  <-- line 4
    | [@dead "v1.A"] A(int);

  Warning Dead Type
  File "./Unboxed.re", line 9, characters 4-10
  v2.A is a variant case which is never constructed
  <-- line 9
    | [@dead "v2.A"] A(int);

  Warning Dead Type
  File "./Unboxed.re", line 16, characters 11-17
  r1.x is a record label never used to read a value
  <-- line 16
  type r1 = {[@dead "r1.x"] x: int};

  Warning Dead Type
  File "./Unboxed.re", line 21, characters 4-18
  r2.B is a variant case which is never constructed
  <-- line 21
    | [@dead "r2.B"] B({g: string});

  Warning Dead Type
  File "./Variants.re", line 97, characters 4-29
  type_.Type is a variant case which is never constructed
  <-- line 97
    | [@dead "type_.Type"] [@genType.as "type"] Type;

  Warning Dead Type
  File "./Variants.re", line 105, characters 4-10
  result1.Ok is a variant case which is never constructed
  <-- line 105
    | [@dead "result1.Ok"] Ok('a)

  Warning Dead Type
  File "./Variants.re", line 106, characters 4-13
  result1.Error is a variant case which is never constructed
  <-- line 106
    | [@dead "result1.Error"] Error('b);

  Warning Dead Type
  File "./VariantsWithPayload.re", line 51, characters 4-5
  simpleVariant.A is a variant case which is never constructed
  <-- line 51
    | [@dead "simpleVariant.A"] A

  Warning Dead Type
  File "./VariantsWithPayload.re", line 52, characters 4-5
  simpleVariant.B is a variant case which is never constructed
  <-- line 52
    | [@dead "simpleVariant.B"] B

  Warning Dead Type
  File "./VariantsWithPayload.re", line 53, characters 4-5
  simpleVariant.C is a variant case which is never constructed
  <-- line 53
    | [@dead "simpleVariant.C"] C;

  Warning Dead Type
  File "./VariantsWithPayload.re", line 60, characters 4-30
  variantWithPayloads.A is a variant case which is never constructed
  <-- line 60
    | [@dead "variantWithPayloads.A"] [@genType.as "ARenamed"] A

  Warning Dead Type
  File "./VariantsWithPayload.re", line 61, characters 4-10
  variantWithPayloads.B is a variant case which is never constructed
  <-- line 61
    | [@dead "variantWithPayloads.B"] B(int)

  Warning Dead Type
  File "./VariantsWithPayload.re", line 62, characters 4-15
  variantWithPayloads.C is a variant case which is never constructed
  <-- line 62
    | [@dead "variantWithPayloads.C"] C(int, int)

  Warning Dead Type
  File "./VariantsWithPayload.re", line 63, characters 4-17
  variantWithPayloads.D is a variant case which is never constructed
  <-- line 63
    | [@dead "variantWithPayloads.D"] D((int, int))

  Warning Dead Type
  File "./VariantsWithPayload.re", line 64, characters 4-23
  variantWithPayloads.E is a variant case which is never constructed
  <-- line 64
    | [@dead "variantWithPayloads.E"] E(int, string, int);

  Warning Dead Type
  File "./VariantsWithPayload.re", line 100, characters 4-10
  variant1Int.R is a variant case which is never constructed
  <-- line 100
    | [@dead "variant1Int.R"] R(int);

  Warning Dead Type
  File "./VariantsWithPayload.re", line 107, characters 4-14
  variant1Object.R is a variant case which is never constructed
  <-- line 107
    | [@dead "variant1Object.R"] R(payload);
  
  Analysis reported 327 issues (Warning Dead Exception:1, Warning Dead Module:24, Warning Dead Type:81, Warning Dead Value:206, Warning Dead Value With Side Effects:2, Warning Redundant Optional Argument:3, Warning Unused Argument:10)
